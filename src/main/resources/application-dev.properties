spring.application.name=PlcBackRefactoring

server.port=${APPLICATION_PORT_DEV}

vplc-cfg=${VPLC_CFG_FILE_PATH_DEV}
vplc-library=${VPLC_LIBRARY_PATH_DEV}

# database settings
spring.datasource.url=${POSTGRES_URL_DEV}
spring.datasource.username=${POSTGRES_USERNAME_DEV}
spring.datasource.password=${POSTGRES_PASSWORD_DEV}
spring.jpa.generate-ddl=true
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=${HIBERNATE_DDL_AUT0}

kafka.bootstrap_server=${KAFKA_BOOTSTRAP_SERVER_DEV}
spring.kafka.sasl.isSecurityEnabled=false
spring.kafka.sasl.username=${KAFKA_USERNAME}
spring.kafka.sasl.password=${KAFKA_PASSWORD}

# topics to emit messages
kafka.plc.build_project=${KAFKA_PLC_BUILD_COMMANDS_TOPIC}
kafka.plc.commands=${KAFKA_PLC_SCHEME_COMMANDS_TOPIC}
kafka.plc.validated_schemas=${KAFKA_PLC_VALIDATED_SCHEMAS_TOPIC}
kafka.plc.deleted_schemas=${KAFKA_PLC_DELETED_SCHEMAS_TOPIC}
kafka.plc.inputs=${KAFKA_PLC_INPUTS_TOPIC}

# topics to receive messages
kafka.plc.build_status=${KAFKA_PLC_BUILD_STATUS_TOPIC}
kafka.plc.output_vars_monitoring=${KAFKA_PLC_OUTPUTS_TOPIC}
kafka.plc.health_check=${KAFKA_PLC_HEALTHCHECK_STATUS_TOPIC}
kafka.plc.project_event=${KAFKA_PLC_PROJECT_EVENT_TOPIC}
kafka.plc.licenses=${KAFKA_PLC_SLOTS_CFG_TOPIC}

# group id
kafka.plc.build_status.group_id=${KAFKA_PLC_BUILD_STATUS_GROUP_ID_DEV}
kafka.plc.output_vars_monitoring.group_id=${KAFKA_PLC_OUTPUTS_GROUP_ID_DEV}
kafka.plc.health_check.group_id=${KAFKA_PLC_HEALTHCHECK_STATUS_GROUP_ID_DEV}
kafka.plc.project_event.group_id=${KAFKA_PLC_PROJECT_EVENT_GROUP_ID_DEV}
kafka.plc.licenses.group_id=${KAFKA_PLC_SLOTS_CFG_GROUP_ID_DEV}

# security
spring.security.enable=true
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://192.168.123.99:8080/realms/dev-stand
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://192.168.123.99:8080/realms/dev-stand/protocol/openid-connect/certs
spring.security.oauth2.client.registration.keycloak.client-id=${KEYCLOAK_CLIENT_ID}
spring.security.oauth2.client.registration.keycloak.client-secret=${KEYCLOAK_CLIENT_SECRET}
spring.security.oauth2.client.registration.keycloak.authorization-grant-type=client_credentials
spring.security.oauth2.client.provider.keycloak.token-uri=${KEYCLOAK_TOKEN_URI}

services.address.integration-platform=${INTEGRATION_PLATFORM_URL}

gcc=${GCC_PATH_DEV}

management.endpoints.web.exposure.include=health,prometheus
management.prometheus.metrics.export.enabled=true