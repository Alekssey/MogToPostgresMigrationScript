spring.application.name=PlcBackRefactoring

server.port=9089

# postgres database settings
# local
#spring.datasource.url=jdbc:postgresql://localhost:5432/plc_backend_db
#spring.datasource.username=postgres
#spring.datasource.password=password
#spring.jpa.generate-ddl=true
#spring.jpa.show-sql=true
#spring.jpa.hibernate.ddl-auto=create
# demo-stand
spring.datasource.url=jdbc:postgresql://192.168.1.234:5432/plc_backend_db
spring.datasource.username=dtps
spring.datasource.password=GJW2q66D3ghVA1MenUxH2XyHxXTgtw
spring.jpa.generate-ddl=true
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update

# mongo db settings
# local
#spring.data.mongodb.uri=mongodb://localhost:27017
#spring.data.mongodb.database=modelsdb
# demo-stand
spring.data.mongodb.uri=mongodb://dtps:7jZSRj6NSQSwDmex4GG1EH6MxWoamx@192.168.1.234:27017
spring.data.mongodb.database=modelsdb


# security
spring.security.enable=true
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://192.168.123.99:8080/realms/dev-stand
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://192.168.123.99:8080/realms/dev-stand/protocol/openid-connect/certs
spring.security.oauth2.client.registration.keycloak.client-id=${KEYCLOAK_CLIENT_ID}
spring.security.oauth2.client.registration.keycloak.client-secret=${KEYCLOAK_CLIENT_SECRET}
spring.security.oauth2.client.registration.keycloak.authorization-grant-type=client_credentials
spring.security.oauth2.client.provider.keycloak.token-uri=${KEYCLOAK_TOKEN_URI}

services.address.integration-platform=http://192.168.123.101:8200
